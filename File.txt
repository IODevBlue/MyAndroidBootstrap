* CACHE AN IMAGE 
----------------
public File cacheImage(Uri uri) {
    String name = Util.createUUIDKey(uri) + ".jpg";
    File file = new File(location, name);
    if (file.exists()) {
      return file;
    }      
    Bitmap bit;
    try(FileOutputStream fos = new FileOutputStream(file)) {
      ByteArrayOutputStream os = new ByteArrayOutputStream();
      bit = BitmapFactory.decodeStream(new FileInputStream(uri.toString()));
      bit.compress(Bitmap.CompressFormat.JPEG, 100, os); //TODO: Does the byte output stream close in this method? 
      file.createNewFile();
      fos.write(os.toByteArray());
      return file;
    }
    catch (IOException e) {
      e.printStackTrace();
    }
    return file;
  }
  
  @RequiresApi(api = Build.VERSION_CODES.Q)
  public Uri cacheImageQ(Uri uri) {
    String name = Util.createUUIDKey(uri) + ".jpg";
    Bitmap bit;
    File file = new File(location, name);
    Uri tempUri = Uri.fromFile(file);
    if (file.exists()) {
      return tempUri;
    }
    try {
      ContentValues cv = new ContentValues();
      bit = BitmapFactory.decodeStream(context.getContentResolver().openInputStream(uri));
      cv.put(MediaStore.Images.Media.DISPLAY_NAME, name);
      cv.put(MediaStore.Images.Media.MIME_TYPE, "image/jpeg");
      cv.put(MediaStore.Images.Media.RELATIVE_PATH, location.getAbsolutePath());
      cv.put(MediaStore.Images.Media.IS_PENDING, 1);
      tempUri = context.getContentResolver().insert(MediaStore.Images.Media.getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY), cv);
      OutputStream os = context.getContentResolver().openOutputStream(tempUri);
      bit.compress(Bitmap.CompressFormat.JPEG, 100, os);
      cv.clear();
      cv.put(MediaStore.Images.Media.IS_PENDING, 0);
      context.getContentResolver().update(tempUri, cv, null, null);
      os.close();
    } catch (IOException e) { 
      e.printStackTrace(); 
    }
    return tempUri;
  }